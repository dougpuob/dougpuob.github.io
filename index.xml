<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Douglas Chen</title>
        <link>https://dougpuob.github.io/</link>
        <description>Recent content on Douglas Chen</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Sun, 30 May 2021 11:53:06 +0800</lastBuildDate><atom:link href="https://dougpuob.github.io/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Build speed comparison between LXC, QEMU, and Native by LLVM</title>
        <link>https://dougpuob.github.io/post/20210530-build-speed-comparison-btw-lxc-qemu-and-baremetal-by-llvm/</link>
        <pubDate>Sun, 30 May 2021 11:53:06 +0800</pubDate>
        
        <guid>https://dougpuob.github.io/post/20210530-build-speed-comparison-btw-lxc-qemu-and-baremetal-by-llvm/</guid>
        <description>&lt;img src="https://dougpuob.github.io/post/20210530-build-speed-comparison-btw-lxc-qemu-and-baremetal-by-llvm/index.jpg" alt="Featured image of post Build speed comparison between LXC, QEMU, and Native by LLVM" /&gt;&lt;p&gt;敗了一顆AMD Ryzen 9 3900X(12 Cores, 24 Threads)，把RAM置頂到192GB，編譯速度遠勝舊機器，想做些實驗留下記錄把感覺數據化。我把幾個我曾經使用過的開發環境都放入測試，主要是測試原生機與虛擬機(Windows/Linux in QEMU/KVM、LXC)在編譯LLVM專案榨乾CPU資源的同時，比較那一種花的時間比較少。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;起因&#34;&gt;起因&lt;/h2&gt;
&lt;p&gt;我原本使用的Intel便當盒拿來編譯LLVM太慢，一個小改動就需要20~60分鐘的編譯時間，下班時間花在side project時間本來就不多，其中有一大半是在等待有些浪費。除了編譯還有執行測試(Regression Test與Unit Test)，整個跑完幾次後我變的愈庲愈有耐心了。耐心蓄積到上限後我還是敗了AMD Ryzen 9 3900X (3.8GHz 12 Cores, 24 Threads)，還把DRAM安裝到上限的192GB(事後發現192GB的DRAM有些浪費)，改善之後最好的情況耗時約10~15分鐘，有數倍時顯的改變。&lt;/p&gt;
&lt;p&gt;LLVM是跨平台的專案，每次推上去的patch後，BuildBot machines會分別在Windows與Linux作業系統上跑完編譯與測試，所以我本地端的環境也準備了兩種環境。我習慣的開發環境是Windows，Linux則是在Windows中使用VM安裝Ubuntu，之間透過SSH溝通(VSCode+&lt;a class=&#34;link&#34; href=&#34;https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-ssh&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Remote SSH&lt;/a&gt;)。一切處理好就這樣過了好一陣子，直到朋友向我提到&lt;code&gt;PVE&lt;/code&gt;(Proxomax Virtual Environment)很像可以幫上我簡化環境，於是我開始接觸PVE，試著把我的開發環境架建在PVE。&lt;/p&gt;
&lt;p&gt;簡單的介紹一下&lt;code&gt;PVE&lt;/code&gt;的用途，它使用Debian作為Host OS，整合了LXC與KVM(QEMU)的虛擬環境技術，讓我可以最大比例的共享AMD R9 3900X的硬體資源。&lt;code&gt;PVE&lt;/code&gt;整合的非常友善，大部份的事都可以透過WebUI處理完，非常的方便。從Intel NUC始換過去的前後，我沒有特別留下編譯所需的時間，只覺得快多了卻沒有比較的數據。有了PVE後環境就更豐富，更多了LXC與KVM的虛擬環境，事情不可能只有優點，很直覺的能想的到是虛擬環境可能會與原生機有些差異，到底差多少我一直很好奇，於是就催生了這篇文章。&lt;/p&gt;
&lt;p&gt;下面就是我測試結果、方式&amp;amp;條件、還有結論。&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;測試結果&#34;&gt;測試結果&lt;/h2&gt;
&lt;h3 id=&#34;測試數據&#34;&gt;測試數據&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;結果比較(時間)&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;AMD R9 3900x&lt;/th&gt;
&lt;th&gt;Ninja-Vs2019&lt;/th&gt;
&lt;th&gt;MSBuild-Vs2019&lt;/th&gt;
&lt;th&gt;Ninja-Gcc&lt;/th&gt;
&lt;th&gt;Core&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;BareMetal-Native[SVM]&lt;/td&gt;
&lt;td&gt;11.96&lt;/td&gt;
&lt;td&gt;23.96&lt;/td&gt;
&lt;td&gt;11.31&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BareMetal-Native&lt;/td&gt;
&lt;td&gt;17.86&lt;/td&gt;
&lt;td&gt;26.36&lt;/td&gt;
&lt;td&gt;14.54&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PVE-QEMU/KVM&lt;/td&gt;
&lt;td&gt;13.68&lt;/td&gt;
&lt;td&gt;26.85&lt;/td&gt;
&lt;td&gt;13.99&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PVE-lxc&lt;/td&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;td&gt;12.05&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VMware-Windows10&lt;/td&gt;
&lt;td&gt;16.3&lt;/td&gt;
&lt;td&gt;29.79&lt;/td&gt;
&lt;td&gt;13.64&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VMware-Ubuntu20.4&lt;/td&gt;
&lt;td&gt;15.58&lt;/td&gt;
&lt;td&gt;29.7&lt;/td&gt;
&lt;td&gt;14.31&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BareMetal-Native&lt;/td&gt;
&lt;td&gt;51.66&lt;/td&gt;
&lt;td&gt;63.68&lt;/td&gt;
&lt;td&gt;46.76&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Intel NUC i5&lt;/th&gt;
&lt;th&gt;Ninja-Vs2019&lt;/th&gt;
&lt;th&gt;MSBuild-Vs2019&lt;/th&gt;
&lt;th&gt;Ninja-Gcc&lt;/th&gt;
&lt;th&gt;Core&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;BareMetal-Native&lt;/td&gt;
&lt;td&gt;51.66&lt;/td&gt;
&lt;td&gt;63.68&lt;/td&gt;
&lt;td&gt;46.76&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;結果比較(百分比)&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;AMD R9 3900x&lt;/th&gt;
&lt;th&gt;Ninja-Vs2019&lt;/th&gt;
&lt;th&gt;MSBuild-Vs2019&lt;/th&gt;
&lt;th&gt;Ninja-Gcc&lt;/th&gt;
&lt;th&gt;Core&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;BareMetal-Native[SVM]&lt;/td&gt;
&lt;td&gt;106%&lt;/td&gt;
&lt;td&gt;212%&lt;/td&gt;
&lt;td&gt;100%&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BareMetal-Native&lt;/td&gt;
&lt;td&gt;158%&lt;/td&gt;
&lt;td&gt;233%&lt;/td&gt;
&lt;td&gt;129%&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PVE-QEMU/KVM&lt;/td&gt;
&lt;td&gt;121%&lt;/td&gt;
&lt;td&gt;237%&lt;/td&gt;
&lt;td&gt;124%&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PVE-lxc&lt;/td&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;td&gt;x&lt;/td&gt;
&lt;td&gt;107%&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VMware-Windows10&lt;/td&gt;
&lt;td&gt;144%&lt;/td&gt;
&lt;td&gt;263%&lt;/td&gt;
&lt;td&gt;121%&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;VMware-Ubuntu20.4&lt;/td&gt;
&lt;td&gt;15.58&lt;/td&gt;
&lt;td&gt;263%&lt;/td&gt;
&lt;td&gt;127%&lt;/td&gt;
&lt;td&gt;24&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BareMetal-Native&lt;/td&gt;
&lt;td&gt;51.66&lt;/td&gt;
&lt;td&gt;563%&lt;/td&gt;
&lt;td&gt;413%&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Intel NUC i5&lt;/th&gt;
&lt;th&gt;Ninja-Vs2019&lt;/th&gt;
&lt;th&gt;MSBuild-Vs2019&lt;/th&gt;
&lt;th&gt;Ninja-Gcc&lt;/th&gt;
&lt;th&gt;Core&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;BareMetal-Native&lt;/td&gt;
&lt;td&gt;51.66&lt;/td&gt;
&lt;td&gt;563%&lt;/td&gt;
&lt;td&gt;413%&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這份測試所 &amp;hellip;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有的完整詳細的測試數據表，可以在這[&lt;a class=&#34;link&#34; href=&#34;summary-result-table-details.png&#34; &gt;下載&lt;/a&gt;]的到。&lt;/li&gt;
&lt;li&gt;使用的時間單位都是&lt;code&gt;分鐘&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;使用的&lt;strong&gt;主要電腦&lt;/strong&gt;是&lt;code&gt;AMD&lt;/code&gt; Ryzen 9 3900X (3.8GHz 12 Cores, 24 Threads)。&lt;/li&gt;
&lt;li&gt;使用的&lt;strong&gt;額外電腦&lt;/strong&gt;是&lt;code&gt;Intel&lt;/code&gt; NUC i5-10210U (1.60GHz 4 Cores, 8 Thrreads)。&lt;/li&gt;
&lt;li&gt;指的&lt;code&gt;no SVM&lt;/code&gt;(Secure Virtualal Machine)是指在BIOS中關掉AMD CPU的多執行緒功能(所以僅有12 Cores，沒有另外的12個Threads了)。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;額外說明&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x&lt;/code&gt;    : 無沒資料，因為LXC上不支援Visual Studio 2019。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#CPU&lt;/code&gt; : Cores + Threads&lt;/li&gt;
&lt;li&gt;&lt;code&gt;8&lt;/code&gt;    : 4 Cores + 4 Threads (on Intel CPU)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;12&lt;/code&gt;   : Cores (on AMD CPU，no SVM)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;24&lt;/code&gt;   : 12 Cores + 12 Threads (on AMD CPU)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;32&lt;/code&gt;   : 32GB (Intel CPU機器上全部的記憶體)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;64&lt;/code&gt;   : 64GB (AMD CPU機器上分配64GB給LXC/VM虛擬機使用)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;192&lt;/code&gt;  : 192GB (AMD CPU機器上全部的記憶)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ninja-Gcc&lt;/code&gt;      : 是在Ubuntu20.4中執行。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Ninja-Vs2019&lt;/code&gt;   : 是在Windows10中執行。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;MSBuild-Vs2019&lt;/code&gt; : 是在Windows10中執行。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;長條圖&#34;&gt;長條圖&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;愈短愈好&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 189; 
			flex-basis: 454px&#34;
	&gt;
	&lt;a href=&#34;https://dougpuob.github.io/post/20210530-build-speed-comparison-btw-lxc-qemu-and-baremetal-by-llvm/column-chart.png&#34; data-size=&#34;997x526&#34;&gt;
		&lt;img src=&#34;https://dougpuob.github.io/post/20210530-build-speed-comparison-btw-lxc-qemu-and-baremetal-by-llvm/column-chart.png&#34;
			width=&#34;997&#34;
			height=&#34;526&#34;
			srcset=&#34;https://dougpuob.github.io/post/20210530-build-speed-comparison-btw-lxc-qemu-and-baremetal-by-llvm/column-chart_hu9c8e2853152ea28166e195eaae6fbdee_19418_480x0_resize_box_3.png 480w, https://dougpuob.github.io/post/20210530-build-speed-comparison-btw-lxc-qemu-and-baremetal-by-llvm/column-chart_hu9c8e2853152ea28166e195eaae6fbdee_19418_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;Column chart&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;Column chart&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;h3 id=&#34;長條圖-加入intel-ncu&#34;&gt;長條圖 (加入Intel NCU)&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;愈短愈好&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;figure 
	
		class=&#34;gallery-image&#34; 
		style=&#34;
			flex-grow: 189; 
			flex-basis: 454px&#34;
	&gt;
	&lt;a href=&#34;https://dougpuob.github.io/post/20210530-build-speed-comparison-btw-lxc-qemu-and-baremetal-by-llvm/column-chart-with-intel-nuc.png&#34; data-size=&#34;997x526&#34;&gt;
		&lt;img src=&#34;https://dougpuob.github.io/post/20210530-build-speed-comparison-btw-lxc-qemu-and-baremetal-by-llvm/column-chart-with-intel-nuc.png&#34;
			width=&#34;997&#34;
			height=&#34;526&#34;
			srcset=&#34;https://dougpuob.github.io/post/20210530-build-speed-comparison-btw-lxc-qemu-and-baremetal-by-llvm/column-chart-with-intel-nuc_hu9cd5783bf1de6af9254490f4d8fe0255_19800_480x0_resize_box_3.png 480w, https://dougpuob.github.io/post/20210530-build-speed-comparison-btw-lxc-qemu-and-baremetal-by-llvm/column-chart-with-intel-nuc_hu9cd5783bf1de6af9254490f4d8fe0255_19800_1024x0_resize_box_3.png 1024w&#34;
			loading=&#34;lazy&#34;
			alt=&#34;Pie chart including Intel NUC&#34;&gt;
	&lt;/a&gt;
	
	&lt;figcaption&gt;Pie chart including Intel NUC&lt;/figcaption&gt;
	
&lt;/figure&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;方法條件&#34;&gt;方法&amp;amp;條件&lt;/h2&gt;
&lt;p&gt;測試的方式很直覺，安裝完作業系統後把它更新到最新的，Windows Update或apt update然後安裝所需軟體，接下來就敲指令進行測試。其中有一項是no SVM是進到BIOS關掉SVM mode之外，我沒有為硬體多作些設定或調校。其中有些數據我重新測試後會得到不一樣的數值，我僅保留最小數值的那次。主系統上的硬碟是1TB M.2的NVMe速度是PCIe Gen3，所以Disk I/O不會是效能的瓶頸，沒進行討論。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用到的機器&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Intel NUC i5-10210U (1.60GHz 4 Cores, 8 Thrreads) 32GB DRAM&lt;br&gt;
(這台電腦裡有使用我們公司的IC，還有我寫的Kernel Driver，用起來有種特別的心情)&lt;/li&gt;
&lt;li&gt;AMD Ryzen 9 3900X (3.8GHz 12 Cores, 24 Threads) 128GB DRAM&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;虛擬機&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;VMWare/Windows10的Host OS是Windows10。&lt;/li&gt;
&lt;li&gt;VMWare/Ubuntu20.4的Host OS是Windows10。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;虛擬機磁碟格式&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LXC      : &lt;code&gt;QCOW2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;QEMU/KVM : &lt;code&gt;QCOW2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;VMWare   : &lt;code&gt;VMDK&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;編譯目標&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=&#34;link&#34; href=&#34;https://github.com/llvm/llvm-project/tree/llvmorg-11.0.1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;llvmorg-11.1.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;編譯指令&amp;amp;參數&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最近在嘗試PowerShell，就用它來寫腳本。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Ubuntu20.4(Ninja-Gcc) &amp;amp; Windows10(Ninja-Vs2019)&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;Measure-Command&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;                                               &lt;span class=&#34;p&#34;&gt;`&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;cmake&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-G&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Ninja&amp;#34;&lt;/span&gt;                                                &lt;span class=&#34;p&#34;&gt;`&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;-DLLVM_ENABLE_ABI_BREAKING_CHECKS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OFF&lt;/span&gt;                     &lt;span class=&#34;p&#34;&gt;`&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;-DLLVM_TARGETS_TO_BUILD&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;X86&amp;#34;&lt;/span&gt;                             &lt;span class=&#34;p&#34;&gt;`&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;-DLLVM_ENABLE_PROJECTS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;clang;llvm;clang-tools-extra&amp;#34;&lt;/span&gt;     &lt;span class=&#34;p&#34;&gt;`&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;-DCMAKE_BUILD_TYPE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Release&lt;/span&gt;                                &lt;span class=&#34;p&#34;&gt;`&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;../&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;llvm&lt;/span&gt;                                                   &lt;span class=&#34;p&#34;&gt;`&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nb&#34;&gt;Measure-Command&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;                                               &lt;span class=&#34;p&#34;&gt;`&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;cmake&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;-build&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;-config&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Release&lt;/span&gt;                                &lt;span class=&#34;p&#34;&gt;`&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;c&#34;&gt;# Windows10(MSBuild-Vs2019)&lt;/span&gt;
&lt;span class=&#34;nb&#34;&gt;Measure-Command&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;                                               &lt;span class=&#34;p&#34;&gt;`&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;cmake&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-G&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Visual Studio 16 2019&amp;#34;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;-A&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;X64&lt;/span&gt;                         &lt;span class=&#34;p&#34;&gt;`&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;-DLLVM_ENABLE_ABI_BREAKING_CHECKS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OFF&lt;/span&gt;                     &lt;span class=&#34;p&#34;&gt;`&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;-DLLVM_TARGETS_TO_BUILD&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;X86&amp;#34;&lt;/span&gt;                             &lt;span class=&#34;p&#34;&gt;`&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;-DLLVM_ENABLE_PROJECTS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;clang;llvm;clang-tools-extra&amp;#34;&lt;/span&gt;     &lt;span class=&#34;p&#34;&gt;`&lt;/span&gt;
      &lt;span class=&#34;n&#34;&gt;-DCMAKE_BUILD_TYPE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Release&lt;/span&gt;                                &lt;span class=&#34;p&#34;&gt;`&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;../&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;llvm&lt;/span&gt;                                                   &lt;span class=&#34;p&#34;&gt;`&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nb&#34;&gt;Measure-Command&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;                                               &lt;span class=&#34;p&#34;&gt;`&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;cmake&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;-build&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;-config&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Release&lt;/span&gt;                                &lt;span class=&#34;p&#34;&gt;`&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h2 id=&#34;結論&#34;&gt;結論&lt;/h2&gt;
&lt;p&gt;整個測試大概花了2~3天完成，其中包括了等待與手殘重測所花的時間。測試中所使用到的QEMU/KVM與LXC都是基於PVE的環境，過程遇到些問題要感謝&lt;a class=&#34;link&#34; href=&#34;http://blog.jason.tools/&#34;  title=&#34;節省工具箱&#34;
     target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;節省哥&lt;/a&gt;的幫助，還好有他我的PVE之路走的格外的順利。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;我大至用條列式整理我的結論：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Native的表現不意外是最好的，LXC的表現也非常優秀，兩個數值非常相近。LXC花的時間比Native多約&lt;code&gt;6%&lt;/code&gt;(僅Linux)。&lt;/li&gt;
&lt;li&gt;Native在關掉SVM mode(多執行序)花的時間比Native多約&lt;code&gt;10~49%&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;QEMU/KVM整體的表現也不錯，但還略遜Native約&lt;code&gt;12~23%&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;VMWare/Ubuntu20.4花的時間比Native多約&lt;code&gt;20~26%&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;VMWare/Windows10花的時間比Native多約&lt;code&gt;20~36%&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;Intel NUC花的時間比AMD 3900X多約&lt;code&gt;265~431&lt;/code&gt;%。與我最原始的痛點在換CPU後改善了2~4倍。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;以一個開發者額外想補充的心得：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;看百分比感覺差很多，實際上多個1~3分不會有太強烈的感覺。反到是天氣愈來愈熱有時後CPU可以到83~85度C，還沒覺得慢之前就熱到開始流汗了。&lt;/li&gt;
&lt;li&gt;裡面我最無奈的是MSBuild-Vs2019這項最有感，明顯慢了1倍。我通常拿它看程式碼追程式碼，編譯就交給Ninja與compilers。&lt;/li&gt;
&lt;li&gt;我全部的記憶體是192GB，編譯Release的版本大概需要32GB我覺得是甜蜜點。&lt;/li&gt;
&lt;li&gt;接上一項，在Linux上如果linker使用lld使用到的記憶體會有明顯的下降，約10GB左右就足夠了。&lt;/li&gt;
&lt;li&gt;使用VMWare編譯時我發現CPU的溫度會特別高，我想應該是VM程式有動態調整CPU的vcore。(沒特別是查證原因，留給自己的記錄)&lt;/li&gt;
&lt;li&gt;最後，家裡並沒有使用PVE，我反而是把PVE應用在上班的工作中，雖然PVE增加了應用的多樣性與方便性，我例出我沒有使用原因：
&lt;ol&gt;
&lt;li&gt;家裡的機器只會有我一個人使用，分享再多的硬體資源我還是只有一個人兩雙手。&lt;/li&gt;
&lt;li&gt;改好程式碼後同時在Windows, Linux編譯的速度不會比較快，而且失敗重試所花的時間會更久。&lt;/li&gt;
&lt;li&gt;效能還是比原生機差一些。&lt;/li&gt;
&lt;li&gt;最主要的原因是「我不想一次開兩台電腦」。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;以上資訊僅提供參考，測試數據可能會依設定或其它因素有所不同。&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&#34;參考資訊&#34;&gt;參考資訊&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;AMD Ryzen™ 9 3900X 官網資訊&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://www.amd.com/en/products/cpu/amd-ryzen-9-3900x&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://www.amd.com/en/products/cpu/amd-ryzen-9-3900x&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Intel® NUC (NUC10i5FNB)&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://ark.intel.com/content/www/tw/zh/ark/products/189239/intel-nuc-10-performance-kit-nuc10i5fnh.html&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://ark.intel.com/content/www/tw/zh/ark/products/189239/intel-nuc-10-performance-kit-nuc10i5fnh.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;LLVM source code&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://github.com/llvm/llvm-project/tree/llvmorg-11.0.1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://github.com/llvm/llvm-project/tree/llvmorg-11.0.1&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Proxmox VE Documentation&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;https://pve.proxmox.com/pve-docs/&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;https://pve.proxmox.com/pve-docs/&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;節省工具箱&lt;br&gt;
&lt;a class=&#34;link&#34; href=&#34;http://blog.jason.tools&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://blog.jason.tools&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
</description>
        </item>
        
    </channel>
</rss>
